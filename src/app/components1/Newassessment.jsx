import React, { useState } from 'react';
import SelEmpAssesment from './SelEmpAssessment';
import { IconButton, InputBase, Paper, Button, Drawer, TextField, Checkbox, FormControlLabel } from '@mui/material';
import SearchIcon from '@mui/icons-material/Search';
import DoDisturbOnIcon from '@mui/icons-material/DoDisturbOn';
import DrawerComponent from './DrawerComponent';

const initialTraitsData = [
    {
        traits: [
            { name: "Communication", selected: true },
            { name: "Influencing", selected: true },
            { name: "Conflict Resolution", selected: true },
            { name: "Cultural Sensitivity", selected: true },
            { name: "Empathy", selected: false },
            { name: "Listening Skills", selected: false },
        ],
        category: "Interpersonal Skills",
        description: ["Description of this skill", "Line 2", "Line 3"],
    },
    {
        traits: [
            { name: "Communication", selected: true },
            { name: "Influencing", selected: true },
            { name: "Conflict Resolution", selected: true },
            { name: "Cultural Sensitivity", selected: true },
            { name: "Empathy", selected: false },
            { name: "Listening Skills", selected: false },
        ],
        category: "Self-Management",
        description: ["Description of this skill", "Line 2", "Line 3"],
    },
    {
        traits: [
            { name: "Communication", selected: true },
            { name: "Influencing", selected: true },
            { name: "Conflict Resolution", selected: true },
            { name: "Cultural Sensitivity", selected: true },
            { name: "Empathy", selected: false },
            { name: "Listening Skills", selected: false },
        ],
        category: "Cognitive Skills",
        description: ["Description of this skill", "Line 2", "Line 3"],
    },
    {
        traits: [
            { name: "Communication", selected: true },
            { name: "Influencing", selected: true },
            { name: "Conflict Resolution", selected: true },
            { name: "Cultural Sensitivity", selected: true },
            { name: "Empathy", selected: false },
            { name: "Listening Skills", selected: false },
        ],
        category: "Professionalism",
        description: ["Description of this skill", "Line 2", "Line 3"],
    },
    {
        traits: [
            { name: "Communication", selected: true },
            { name: "Influencing", selected: true },
            { name: "Conflict Resolution", selected: true },
            { name: "Cultural Sensitivity", selected: true },
            { name: "Empathy", selected: false },
            { name: "Listening Skills", selected: false },
        ],
        category: "Innovation",
        description: ["Description of this skill", "Line 2", "Line 3"],
    },
];

const NewAssessment = () => {
    const [traitsData, setTraitsData] = useState(initialTraitsData);
    const [isEditing, setIsEditing] = useState(false);
    const [drawerOpen, setDrawerOpen] = useState(false);
    const [currentTraitIndex, setCurrentTraitIndex] = useState(null);

    const handleEditToggle = () => {
        setIsEditing(!isEditing);
    };

    const handleAddTrait = (index) => {
        setCurrentTraitIndex(index);
        setDrawerOpen(true);
    };

    const handleRemoveTrait = (index, traitIdx) => {
        const updatedData = [...traitsData];
        updatedData[index].traits[traitIdx].selected = false;
        setTraitsData(updatedData);
    };

    const handleResetChanges = () => {
        setTraitsData(initialTraitsData);
        setIsEditing(false);
    };

    const handleDrawerClose = () => {
        setDrawerOpen(false);
    };

    const handleTraitToggle = (categoryIndex, traitIndex) => {
        const updatedData = [...traitsData];
        updatedData[categoryIndex].traits[traitIndex].selected = !updatedData[categoryIndex].traits[traitIndex].selected;
        setTraitsData(updatedData);
    };

    return (
        <div>
            <div className='mt-1'>
                {/* Assessment Title and Description */}
                <div style={{ fontWeight: 600 }} className='text-brand-green1 text-lg'>Assessment Title</div>
                <div style={{ fontWeight: 400 }} className='text-brand-green1 text-xs'>Assessment Description (Generated by our AI tool based on the questions and their answers)</div>
                <div style={{ fontWeight: 400 }} className='text-brand-green1 text-xs'>Line2</div>
                <div style={{ fontWeight: 400 }} className='text-brand-green1 text-xs'>Line3</div>
            </div>

            <div className='mt-8'>
                <div className='grid grid-cols-2 gap-8 mb-3'>
                    <div className='flex items-end'>Traits Recommended for the Job</div>
                    <div className='flex justify-between items-end'>
                        <div className={`${isEditing ? 'ml-2' : ''}`}>Category</div>
                        <div className="text-right">
                            <button
                                onClick={isEditing ? handleResetChanges : handleEditToggle}
                                className="px-6 py-1 border border-brand-green1 text-sm text-brand-green1 rounded-md">
                                {isEditing ? 'Reset Changes' : 'Edit'}
                            </button>
                            {isEditing && (
                                <button
                                    onClick={handleEditToggle}
                                    className="ml-4 px-6 py-1 bg-brand-green1 text-sm text-white rounded-md">
                                    Save
                                </button>
                            )}
                        </div>
                    </div>
                </div>
                <hr className='border-brand-green1 mb-3' />

                {traitsData.map((data, index) => (
                    <div key={index} className={`flex ${isEditing ? 'ml-2' : 'm-0'} justify-between border-b py-4`}>
                        {/* Traits */}
                        <div className="flex flex-wrap gap-x-7 gap-y-2 w-1/2">
                            {data.traits.filter(trait => trait.selected).map((trait, traitIdx) => (
                                <div key={traitIdx} className="relative inline-block">
                                    {isEditing && (
                                        <IconButton
                                            onClick={() => handleRemoveTrait(index, traitIdx)}
                                            style={{
                                                height: '1px',
                                                width: '1px',
                                                position: 'absolute',
                                                top: '-10px',
                                                left: '-8px',
                                                color: 'white',
                                                backgroundColor: 'white',
                                                borderRadius: '50%',
                                            }}
                                        >
                                            <DoDisturbOnIcon fontSize='small' style={{ color: "#D2091C" }} />
                                        </IconButton>
                                    )}
                                    <span
                                        className="h-fit inline-block bg-brand-green1 text-brand-green px-3 py-1 rounded-lg"
                                    >
                                        {trait.name}
                                    </span>
                                </div>
                            ))}
                            {isEditing && (
                                <Button
                                    onClick={() => handleAddTrait(index)}
                                    style={{ fontWeight: 400 }}
                                    className="h-fit bg-brand-green text-brand-green1 px-3 py-1 rounded-lg">
                                    Add New Trait
                                </Button>
                            )}
                        </div>

                        {/* Category and Description */}
                        <div className="w-1/2 ml-10">
                            <h3 style={{ fontWeight: 600 }} className="text-lg font-bold text-brand-green1">{data.category}</h3>
                            {data.description.map((line, idx) => (
                                <p key={idx} style={{ fontWeight: 400 }} className="text-brand-green1 text-sm">{line}</p>
                            ))}
                        </div>
                    </div>
                ))}
            </div>

            <div className='mt-14'>
                <div className='flex justify-between items-end mb-8'>
                    <div style={{ fontWeight: 700 }} className='text-brand-green1 text-xl'>Select Employees for Assessment</div>
                    <div>
                        <Paper
                            style={{ backgroundColor: "#EAEAEA", boxShadow: "none" }}
                            className='rounded-lg'
                            component="form"
                            sx={{ p: '0px 4px', display: 'flex', alignItems: 'center', width: 300 }}
                        >
                            <IconButton type="button" sx={{ p: '8px' }} aria-label="search">
                                <SearchIcon />
                            </IconButton>
                            <InputBase
                                sx={{ ml: 1, flex: 1 }}
                                placeholder="Search"
                            />
                        </Paper>
                    </div>
                </div>
                <SelEmpAssesment />
            </div>

            <DrawerComponent
                open={drawerOpen}
                onClose={() => setDrawerOpen(false)}
                traitsData={traitsData}
                handleTraitToggle={handleTraitToggle}
            />
            {/* Drawer for managing traits */}
            {/* <Drawer anchor="right" open={drawerOpen} onClose={handleDrawerClose}>
                <div style={{ width: 300, padding: 20 }}>
                    <h2>Select Traits</h2>
                    {currentTraitIndex !== null && traitsData[currentTraitIndex].traits.map((trait, traitIndex) => (
                        <FormControlLabel
                            key={traitIndex}
                            control={
                                <Checkbox
                                    checked={trait.selected}
                                    onChange={() => handleTraitToggle(currentTraitIndex, traitIndex)}
                                />
                            }
                            label={trait.name}
                        />
                    ))}
                    <Button
                        onClick={handleDrawerClose}
                        variant="outlined"
                        color="secondary"
                        fullWidth
                        style={{ marginTop: '10px' }}
                    >
                        Close
                    </Button>
                </div>
            </Drawer> */}
        </div>
    );
};

export default NewAssessment;


//import React, { useState } from 'react';
// import SelEmpAssesment from './SelEmpAssessment';
// import { IconButton, InputBase, Paper, Button, Drawer, TextField } from '@mui/material';
// import SearchIcon from '@mui/icons-material/Search';
// import DoDisturbOnIcon from '@mui/icons-material/DoDisturbOn';

// const initialTraitsData = [
//     {
//         traits: ["Communication", "Influencing", "Conflict Resolution", "Cultural Sensitivity"],
//         category: "Interpersonal Skills",
//         description: ["Description of this skill", "Line 2", "Line 3"],
//     },
//     {
//         traits: ["Communication", "Influencing", "Conflict Resolution", "Cultural Sensitivity"],
//         category: "Self-Management",
//         description: ["Description of this skill", "Line 2", "Line 3"],
//     },
//     {
//         traits: ["Communication", "Influencing", "Conflict Resolution", "Cultural Sensitivity"],
//         category: "Cognitive Skills",
//         description: ["Description of this skill", "Line 2", "Line 3"],
//     },
//     {
//         traits: ["Communication", "Influencing", "Conflict Resolution", "Cultural Sensitivity"],
//         category: "Professionalism",
//         description: ["Description of this skill", "Line 2", "Line 3"],
//     },
//     {
//         traits: ["Communication", "Influencing", "Conflict Resolution", "Cultural Sensitivity"],
//         category: "Innovation",
//         description: ["Description of this skill", "Line 2", "Line 3"],
//     },
// ];

// const Newassessment = () => {
//     const [traitsData, setTraitsData] = useState(initialTraitsData);
//     const [isEditing, setIsEditing] = useState(false);
//     const [drawerOpen, setDrawerOpen] = useState(false);
//     const [newTrait, setNewTrait] = useState('');
//     const [currentTraitIndex, setCurrentTraitIndex] = useState(null);

//     const handleEditToggle = () => {
//         setIsEditing(!isEditing);
//     };

//     const handleAddTrait = (index) => {
//         setCurrentTraitIndex(index);
//         setDrawerOpen(true);
//     };

//     const handleRemoveTrait = (index, traitIdx) => {
//         const updatedData = [...traitsData];
//         updatedData[index].traits.splice(traitIdx, 1);
//         setTraitsData(updatedData);
//     };

//     const handleResetChanges = () => {
//         setTraitsData(initialTraitsData);
//         setIsEditing(false);
//     };

//     const handleDrawerClose = () => {
//         setDrawerOpen(false);
//         setNewTrait('');
//     };

//     const handleSaveTrait = () => {
//         if (newTrait) {
//             const updatedData = [...traitsData];
//             updatedData[currentTraitIndex].traits.push(newTrait);
//             setTraitsData(updatedData);
//             handleDrawerClose();
//         }
//     };

//     return (
//         <div>
//             <div className='mt-1'>
//                 {/* Assessment Title and Description */}
//                 <div style={{ fontWeight: 600 }} className='text-brand-green1 text-lg'>Assessment Title</div>
//                 <div style={{ fontWeight: 400 }} className='text-brand-green1 text-xs'>Assessment Description (Generated by our AI tool based on the questions and their answers)</div>
//                 <div style={{ fontWeight: 400 }} className='text-brand-green1 text-xs'>Line2</div>
//                 <div style={{ fontWeight: 400 }} className='text-brand-green1 text-xs'>Line3</div>
//             </div>

//             <div className='mt-8'>
//                 <div className='grid grid-cols-2 gap-8 mb-3'>
//                     <div className='flex items-end'>Traits Recommended for the Job</div>
//                     <div className='flex justify-between items-end'>
//                         <div className={`${isEditing ? 'ml-2' : ''}`}>Category</div>
//                         <div className="text-right">
//                             <button
//                                 onClick={isEditing ? handleResetChanges : handleEditToggle}
//                                 className="px-6 py-1 border border-brand-green1 text-sm text-brand-green1 rounded-md">
//                                 {isEditing ? 'Reset Changes' : 'Edit'}
//                             </button>
//                             {isEditing && (
//                                 <button
//                                     onClick={handleEditToggle}
//                                     className="ml-4 px-6 py-1 bg-brand-green1 text-sm text-white rounded-md">
//                                     Save
//                                 </button>
//                             )}
//                         </div>
//                     </div>
//                 </div>
//                 <hr className='border-brand-green1 mb-3' />

//                 {traitsData.map((data, index) => (
//                     <div key={index} className={`flex ${isEditing ? 'ml-2' : 'm-0'} justify-between border-b py-4`}>
//                         {/* Traits */}
//                         <div className="flex flex-wrap gap-x-7 gap-y-2 w-1/2">
//                             {data.traits.map((trait, traitIdx) => (
//                                 <div key={traitIdx} className="relative inline-block">
//                                     {isEditing && (
//                                         <IconButton
//                                             onClick={() => handleRemoveTrait(index, traitIdx)}
//                                             style={{
//                                                 height: '1px',
//                                                 width: '1px',
//                                                 position: 'absolute',
//                                                 top: '-10px',
//                                                 left: '-8px',
//                                                 color: 'white',
//                                                 backgroundColor: 'white',
//                                                 borderRadius: '50%',
//                                             }}
//                                         >
//                                             <DoDisturbOnIcon fontSize='small' style={{ color: "#D2091C" }} />
//                                         </IconButton>
//                                     )}
//                                     <span
//                                         className="h-fit inline-block bg-brand-green1 text-brand-green px-3 py-1 rounded-lg"
//                                     >
//                                         {trait}
//                                     </span>
//                                 </div>
//                             ))}
//                             {isEditing && (
//                                 <Button
//                                     onClick={() => handleAddTrait(index)}
//                                     style={{ fontWeight: 400 }}
//                                     className="h-fit bg-brand-green text-brand-green1 px-3 py-1 rounded-lg">
//                                     Add New Trait
//                                 </Button>
//                             )}
//                         </div>

//                         {/* Category and Description */}
//                         <div className="w-1/2 ml-10">
//                             <h3 style={{ fontWeight: 600 }} className="text-lg font-bold text-brand-green1">{data.category}</h3>
//                             {data.description.map((line, idx) => (
//                                 <p key={idx} style={{ fontWeight: 400 }} className="text-brand-green1 text-sm">{line}</p>
//                             ))}
//                         </div>
//                     </div>
//                 ))}
//             </div>

//             <div className='mt-14'>
//                 <div className='flex justify-between items-end mb-8'>
//                     <div style={{ fontWeight: 700 }} className='text-brand-green1 text-xl'>Select Employees for Assessment</div>
//                     <div>
//                         <Paper
//                             style={{ backgroundColor: "#EAEAEA", boxShadow: "none" }}
//                             className='rounded-lg'
//                             component="form"
//                             sx={{ p: '0px 4px', display: 'flex', alignItems: 'center', width: 300 }}
//                         >
//                             <IconButton type="button" sx={{ p: '8px' }} aria-label="search">
//                                 <SearchIcon />
//                             </IconButton>
//                             <InputBase
//                                 sx={{ ml: 1, flex: 1 }}
//                                 placeholder="Search"
//                             />
//                         </Paper>
//                     </div>
//                 </div>
//                 <SelEmpAssesment />
//             </div>

//             {/* Drawer for adding a new trait */}
//             <Drawer anchor="right" open={drawerOpen} onClose={handleDrawerClose}>
//                 <div style={{ width: 300, padding: 20 }}>
//                     <h2>Add New Trait</h2>
//                     <TextField
//                         fullWidth
//                         label="Trait"
//                         value={newTrait}
//                         onChange={(e) => setNewTrait(e.target.value)}
//                         variant="outlined"
//                         margin="normal"
//                     />
//                     <Button
//                         onClick={handleSaveTrait}
//                         variant="contained"
//                         color="primary"
//                         fullWidth
//                         style={{ marginTop: '20px' }}
//                     >
//                         Save
//                     </Button>
//                     <Button
//                         onClick={handleDrawerClose}
//                         variant="outlined"
//                         color="secondary"
//                         fullWidth
//                         style={{ marginTop: '10px' }}
//                     >
//                         Cancel
//                     </Button>
//                 </div>
//             </Drawer>
//         </div>
//     );
// }

// export default Newassessment;

// const handleRemoveTrait = (index, traitIdx) => {
//     const updatedData = [...traitsData];
//     updatedData[index].traits[traitIdx].selected = false;
//     setTraitsData(updatedData);
// };